<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace lk\api;

class OrderStatus 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Send order status request
     * 
     * @param \lk\api\Models\Operations\StatusRequestValidatedApiV1OrdersOrderIdStatusRequestPostRequest $request
     * @param \lk\api\Models\Operations\StatusRequestValidatedApiV1OrdersOrderIdStatusRequestPostSecurity $security
     * @return \lk\api\Models\Operations\StatusRequestValidatedApiV1OrdersOrderIdStatusRequestPostResponse
     */
	public function statusRequestValidatedApiV1OrdersOrderIdStatusRequestPost(
        \lk\api\Models\Operations\StatusRequestValidatedApiV1OrdersOrderIdStatusRequestPostRequest $request,
        \lk\api\Models\Operations\StatusRequestValidatedApiV1OrdersOrderIdStatusRequestPostSecurity $security,
    ): \lk\api\Models\Operations\StatusRequestValidatedApiV1OrdersOrderIdStatusRequestPostResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{order_id}/status-request', \lk\api\Models\Operations\StatusRequestValidatedApiV1OrdersOrderIdStatusRequestPostRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "orderStatus", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \lk\api\Models\Operations\StatusRequestValidatedApiV1OrdersOrderIdStatusRequestPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->response = $serializer->deserialize((string)$httpResponse->getBody(), 'lk\api\Models\Shared\Response', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'lk\api\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Get JSON schema for order status
     * 
     * @return \lk\api\Models\Operations\StatusSchemaApiV1OrdersStatusSchemaGetResponse
     */
	public function statusSchemaApiV1OrdersStatusSchemaGet(
    ): \lk\api\Models\Operations\StatusSchemaApiV1OrdersStatusSchemaGetResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/status/schema');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->defaultClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \lk\api\Models\Operations\StatusSchemaApiV1OrdersStatusSchemaGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->response = $serializer->deserialize((string)$httpResponse->getBody(), 'lk\api\Models\Shared\Response', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }

        return $response;
    }
	
    /**
     * Set order status
     * 
     * @param \lk\api\Models\Operations\StatusValidatedApiV1OrdersOrderIdStatusPostRequest $request
     * @param \lk\api\Models\Operations\StatusValidatedApiV1OrdersOrderIdStatusPostSecurity $security
     * @return \lk\api\Models\Operations\StatusValidatedApiV1OrdersOrderIdStatusPostResponse
     */
	public function statusValidatedApiV1OrdersOrderIdStatusPost(
        \lk\api\Models\Operations\StatusValidatedApiV1OrdersOrderIdStatusPostRequest $request,
        \lk\api\Models\Operations\StatusValidatedApiV1OrdersOrderIdStatusPostSecurity $security,
    ): \lk\api\Models\Operations\StatusValidatedApiV1OrdersOrderIdStatusPostResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v1/orders/{order_id}/status', \lk\api\Models\Operations\StatusValidatedApiV1OrdersOrderIdStatusPostRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "orderStatus", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json;q=1, application/json;q=0';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \lk\api\Models\Operations\StatusValidatedApiV1OrdersOrderIdStatusPostResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->response = $serializer->deserialize((string)$httpResponse->getBody(), 'lk\api\Models\Shared\Response', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 401) {
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->httpValidationError = $serializer->deserialize((string)$httpResponse->getBody(), 'lk\api\Models\Shared\HTTPValidationError', 'json');
            }
        }

        return $response;
    }
}